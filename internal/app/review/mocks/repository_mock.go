// Code generated by MockGen. DO NOT EDIT.
// Source: postgre.go

// Package mock_review is a generated GoMock package.
package mock_review

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_2_Good_Vibes/internal/app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddReview mocks base method.
func (m *MockRepository) AddReview(review models.Review, productRating float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReview", review, productRating)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReview indicates an expected call of AddReview.
func (mr *MockRepositoryMockRecorder) AddReview(review, productRating interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReview", reflect.TypeOf((*MockRepository)(nil).AddReview), review, productRating)
}

// DeleteReview mocks base method.
func (m *MockRepository) DeleteReview(userId, productId int, productRating float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReview", userId, productId, productRating)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReview indicates an expected call of DeleteReview.
func (mr *MockRepositoryMockRecorder) DeleteReview(userId, productId, productRating interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReview", reflect.TypeOf((*MockRepository)(nil).DeleteReview), userId, productId, productRating)
}

// GetAllRatingsOfProduct mocks base method.
func (m *MockRepository) GetAllRatingsOfProduct(productId int) ([]models.ProductRating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRatingsOfProduct", productId)
	ret0, _ := ret[0].([]models.ProductRating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRatingsOfProduct indicates an expected call of GetAllRatingsOfProduct.
func (mr *MockRepositoryMockRecorder) GetAllRatingsOfProduct(productId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRatingsOfProduct", reflect.TypeOf((*MockRepository)(nil).GetAllRatingsOfProduct), productId)
}

// GetReviewByUserAndProduct mocks base method.
func (m *MockRepository) GetReviewByUserAndProduct(userId, productId int) (models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewByUserAndProduct", userId, productId)
	ret0, _ := ret[0].(models.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewByUserAndProduct indicates an expected call of GetReviewByUserAndProduct.
func (mr *MockRepositoryMockRecorder) GetReviewByUserAndProduct(userId, productId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewByUserAndProduct", reflect.TypeOf((*MockRepository)(nil).GetReviewByUserAndProduct), userId, productId)
}

// GetReviewsByProductId mocks base method.
func (m *MockRepository) GetReviewsByProductId(productId int) ([]models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsByProductId", productId)
	ret0, _ := ret[0].([]models.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewsByProductId indicates an expected call of GetReviewsByProductId.
func (mr *MockRepositoryMockRecorder) GetReviewsByProductId(productId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsByProductId", reflect.TypeOf((*MockRepository)(nil).GetReviewsByProductId), productId)
}

// GetReviewsByUser mocks base method.
func (m *MockRepository) GetReviewsByUser(userName string) ([]models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsByUser", userName)
	ret0, _ := ret[0].([]models.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewsByUser indicates an expected call of GetReviewsByUser.
func (mr *MockRepositoryMockRecorder) GetReviewsByUser(userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsByUser", reflect.TypeOf((*MockRepository)(nil).GetReviewsByUser), userName)
}

// UpdateReview mocks base method.
func (m *MockRepository) UpdateReview(review models.Review, productRating float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReview", review, productRating)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReview indicates an expected call of UpdateReview.
func (mr *MockRepositoryMockRecorder) UpdateReview(review, productRating interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReview", reflect.TypeOf((*MockRepository)(nil).UpdateReview), review, productRating)
}
