// Code generated by MockGen. DO NOT EDIT.
// Source: postgre.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_2_Good_Vibes/internal/app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetUserDataById mocks base method.
func (m *MockRepository) GetUserDataById(id uint64) (*models.UserDataStorage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDataById", id)
	ret0, _ := ret[0].(*models.UserDataStorage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDataById indicates an expected call of GetUserDataById.
func (mr *MockRepositoryMockRecorder) GetUserDataById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDataById", reflect.TypeOf((*MockRepository)(nil).GetUserDataById), id)
}

// GetUserDataByName mocks base method.
func (m *MockRepository) GetUserDataByName(name string) (*models.UserDataStorage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDataByName", name)
	ret0, _ := ret[0].(*models.UserDataStorage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDataByName indicates an expected call of GetUserDataByName.
func (mr *MockRepositoryMockRecorder) GetUserDataByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDataByName", reflect.TypeOf((*MockRepository)(nil).GetUserDataByName), name)
}

// SaveAvatarName mocks base method.
func (m *MockRepository) SaveAvatarName(userId int, fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAvatarName", userId, fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAvatarName indicates an expected call of SaveAvatarName.
func (mr *MockRepositoryMockRecorder) SaveAvatarName(userId, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAvatarName", reflect.TypeOf((*MockRepository)(nil).SaveAvatarName), userId, fileName)
}

// UpdatePassword mocks base method.
func (m *MockRepository) UpdatePassword(newData models.UserDataPassword) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", newData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockRepositoryMockRecorder) UpdatePassword(newData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockRepository)(nil).UpdatePassword), newData)
}

// UpdateUser mocks base method.
func (m *MockRepository) UpdateUser(newData models.UserDataProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", newData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockRepositoryMockRecorder) UpdateUser(newData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockRepository)(nil).UpdateUser), newData)
}
