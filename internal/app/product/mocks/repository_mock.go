// Code generated by MockGen. DO NOT EDIT.
// Source: postgre.go

// Package mock_product is a generated GoMock package.
package mock_product

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_2_Good_Vibes/internal/app/models"
	postgre "github.com/go-park-mail-ru/2021_2_Good_Vibes/internal/app/tools/postgre"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddFavouriteProduct mocks base method.
func (m *MockRepository) AddFavouriteProduct(product models.FavouriteProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFavouriteProduct", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFavouriteProduct indicates an expected call of AddFavouriteProduct.
func (mr *MockRepositoryMockRecorder) AddFavouriteProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFavouriteProduct", reflect.TypeOf((*MockRepository)(nil).AddFavouriteProduct), product)
}

// DeleteFavouriteProduct mocks base method.
func (m *MockRepository) DeleteFavouriteProduct(product models.FavouriteProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFavouriteProduct", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFavouriteProduct indicates an expected call of DeleteFavouriteProduct.
func (mr *MockRepositoryMockRecorder) DeleteFavouriteProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFavouriteProduct", reflect.TypeOf((*MockRepository)(nil).DeleteFavouriteProduct), product)
}

// GetAll mocks base method.
func (m *MockRepository) GetAll() ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepository)(nil).GetAll))
}

// GetByCategory mocks base method.
func (m *MockRepository) GetByCategory(filter postgre.Filter) ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCategory", filter)
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCategory indicates an expected call of GetByCategory.
func (mr *MockRepositoryMockRecorder) GetByCategory(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCategory", reflect.TypeOf((*MockRepository)(nil).GetByCategory), filter)
}

// GetById mocks base method.
func (m *MockRepository) GetById(id int) (models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockRepositoryMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockRepository)(nil).GetById), id)
}

// GetFavouriteProducts mocks base method.
func (m *MockRepository) GetFavouriteProducts(userId int) ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavouriteProducts", userId)
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavouriteProducts indicates an expected call of GetFavouriteProducts.
func (mr *MockRepositoryMockRecorder) GetFavouriteProducts(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavouriteProducts", reflect.TypeOf((*MockRepository)(nil).GetFavouriteProducts), userId)
}

// Insert mocks base method.
func (m *MockRepository) Insert(prod models.Product) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", prod)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockRepositoryMockRecorder) Insert(prod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRepository)(nil).Insert), prod)
}

// SaveProductImageName mocks base method.
func (m *MockRepository) SaveProductImageName(productId int, fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProductImageName", productId, fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProductImageName indicates an expected call of SaveProductImageName.
func (mr *MockRepositoryMockRecorder) SaveProductImageName(productId, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProductImageName", reflect.TypeOf((*MockRepository)(nil).SaveProductImageName), productId, fileName)
}
